// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String              @id @default(uuid())
  name              String
  last_name         String
  cpf               String              @unique
  mobile_phone      String              @unique
  email             String              @unique
  username          String              @unique
  password          String
  avatar            String?
  birth_date        DateTime?           @db.Date
  UsersGenders      UsersGenders?       @relation(fields: [genderId], references: [id])
  genderId          Int?
  isTermsAccepted   Boolean?            @default(false)
  isAccountVerified Boolean?            @default(false)
  isAccountLocked   Boolean?            @default(false)
  isPartner         Boolean?
  created_at        DateTime            @default(now())
  updated_at        DateTime?
  UsersAddresses    UsersAddresses[]
  UsersTokens       UsersTokens[]
  BusinessLocations BusinessLocations[]
  UsersVehicles     UsersVehicles[]
  UserQuotes        UserQuotes[]
  UserSchedules     UserSchedules[]
  Messages          Messages[]

  @@index([cpf, username, email])
  @@map("users")
}

model UsersGenders {
  id         Int       @id @unique
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?
  Users      Users[]

  @@index([id, name])
  @@map("users_genders")
}

model UsersAddresses {
  id           String    @id @default(uuid())
  user_id      String?
  users        Users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address_line String
  number       Int
  city         String
  district     String
  state        String
  zipcode      String
  created_at   DateTime  @default(now())
  updated_at   DateTime?

  @@index([user_id, city, state, zipcode, id])
  @@map("users_addresses")
}

model UsersTokens {
  id            String    @id @default(uuid())
  user_id       String
  users         Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  refresh_token String
  expires_date  DateTime  @db.Date
  created_at    DateTime  @default(now())
  updated_at    DateTime?

  @@index([user_id])
  @@map("users_tokens")
}

model BusinessLocations {
  id                          String                        @id @default(uuid())
  user_id                     String
  users                       Users                         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cnpj                        String
  business_name               String
  business_phone              String
  business_email              String
  address_line                String
  number                      Int
  city                        String
  district                    String
  state                       String
  zipcode                     String
  payment_methods             Int[]
  business_categories         Int[]
  business_description        String?
  photos                      String[]                      @default([])
  active                      Boolean                       @default(true)
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime?
  LocationsBusinessCategories LocationsBusinessCategories[]
  PaymentMethods              PaymentMethods?               @relation(fields: [paymentMethodsId], references: [id])
  paymentMethodsId            Int?
  LocationsPhotos             LocationsPhotos[]

  @@index([user_id, cnpj, business_name, business_phone, business_email, city, state, zipcode])
  @@map("business_locations")
}

model LocationsBusinessCategories {
  id                 String            @id @default(uuid())
  business_location  String
  business_locations BusinessLocations @relation(fields: [business_location], references: [id], onDelete: Cascade)

  business_category   Int
  business_categories BusinessCategories @relation(fields: [business_category], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@index([business_location, business_category])
  @@map("locations_business_categories")
}

// GENERATE BUSINESS TYPES
model BusinessCategories {
  id                          Int                           @id @unique
  name                        String
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime?
  BusinessService             BusinessServices[]
  LocationsBusinessCategories LocationsBusinessCategories[]

  @@index([id, name])
  @@map("business_categories")
}

model BusinessServices {
  id            Int                @id @unique
  category_id   Int
  category      BusinessCategories @relation(fields: [category_id], references: [id])
  name          String
  created_at    DateTime           @default(now())
  updated_at    DateTime?
  UserQuotes    UserQuotes[]
  UserSchedules UserSchedules[]

  @@index([id, category_id, name])
  @@map("business_services")
}

model UsersVehicles {
  id       String         @id @default(uuid())
  user_id  String
  users    Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  brand_id Int
  brand    VehiclesBrands @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  name_id  Int
  name     VehiclesNames  @relation(fields: [name_id], references: [id], onDelete: Cascade)
  color    String?
  year     Int
  plate    String?        @unique
  notes    String?
  photo    String?

  insuranceCompaniesId Int                @default(12)
  InsuranceCompanies   InsuranceCompanies @relation(fields: [insuranceCompaniesId], references: [id], onDelete: Cascade)

  isPrimary   Boolean @default(false)
  engineMiles Int?    @default(0)

  created_at    DateTime        @default(now())
  updated_at    DateTime?
  UserQuotes    UserQuotes[]
  UserSchedules UserSchedules[]

  @@index([user_id, brand_id, name_id, year, plate])
  @@map("users_vehicles")
}

model VehiclesBrands {
  id            Int             @id @unique
  name          String
  icon          String
  created_at    DateTime        @default(now())
  updated_at    DateTime?
  VehiclesNames VehiclesNames[]
  UsersVehicles UsersVehicles[]

  @@index([id, name])
  @@map("vehicles_brands")
}

model VehiclesNames {
  id            Int             @id @unique
  brand_id      Int
  brand         VehiclesBrands  @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  name          String
  created_at    DateTime        @default(now())
  updated_at    DateTime?
  UsersVehicles UsersVehicles[]

  @@index([id, brand_id, name])
  @@map("vehicles_names")
}

model InsuranceCompanies {
  id            Int             @id @unique
  name          String
  created_at    DateTime        @default(now())
  updated_at    DateTime?
  UsersVehicles UsersVehicles[]
  UserQuotes    UserQuotes[]

  @@index([id, name])
  @@map("insurance_companies")
}

model InsuranceTypes {
  id         Int          @id @unique
  name       String
  created_at DateTime     @default(now())
  updated_at DateTime?
  UserQuotes UserQuotes[]

  @@index([id, name])
  @@map("insurance_types")
}

model UserQuotes {
  id String @id @default(uuid())

  is_juridical Boolean @default(false)

  user_id String
  users   Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  vehicle_id String
  vehicles   UsersVehicles @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  insurance_type_id Int?
  insurance_type    InsuranceTypes? @relation(fields: [insurance_type_id], references: [id], onDelete: Cascade)

  insurance_company_id Int?
  insurance_company    InsuranceCompanies? @relation(fields: [insurance_company_id], references: [id], onDelete: Cascade)

  service_type    BusinessServices? @relation(fields: [service_type_id], references: [id])
  service_type_id Int?

  franchise_price Float?
  service_price   Float?

  user_notes    String?
  partner_notes String?
  photos        String[] @default([])

  created_at DateTime  @default(now())
  updated_at DateTime?

  UserQuotesDocuments UserQuotesDocuments[]
  QuotesDocuments     QuotesDocuments[]

  @@index([user_id, vehicle_id, insurance_type_id, insurance_company_id])
  @@map("user_quotes")
}

model QuotesDocuments {
  quote_id String
  quote    UserQuotes @relation(fields: [quote_id], references: [id], onDelete: Cascade)

  document_id String
  document    UserQuotesDocuments @relation(fields: [document_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@id([quote_id, document_id])
  @@index([quote_id, document_id])
  @@map("quotes_documents")
}

model UserQuotesDocuments {
  id String @id @default(uuid())

  user_quote_id String
  user_quote    UserQuotes @relation(fields: [user_quote_id], references: [id], onDelete: Cascade)

  document_type_id Int
  document_type    DocumentsTypes @relation(fields: [document_type_id], references: [id], onDelete: Cascade)

  document_url String[] @default([])

  created_at      DateTime          @default(now())
  updated_at      DateTime?
  QuotesDocuments QuotesDocuments[]

  @@index([user_quote_id, document_type_id])
  @@map("user_quotes_documents")
}

model UserSchedules {
  id String @id @default(uuid())

  user_id String
  users   Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  vehicle_id String
  vehicles   UsersVehicles @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  service_type    BusinessServices? @relation(fields: [service_type_id], references: [id])
  service_type_id Int?

  date DateTime @db.Date
  time String

  created_at     DateTime         @default(now())
  updated_at     DateTime?
  SchedulesFiles SchedulesFiles[]

  @@index([user_id, vehicle_id, service_type_id, date, time])
  @@map("user_schedules")
}

model SchedulesFiles {
  id String @id @default(uuid())

  schedule_id String
  schedule    UserSchedules @relation(fields: [schedule_id], references: [id], onDelete: Cascade)

  file_url String

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@index([schedule_id])
  @@map("schedules_files")
}

model DocumentsTypes {
  id                  Int                   @id @unique
  name                String
  created_at          DateTime              @default(now())
  updated_at          DateTime?
  UserQuotesDocuments UserQuotesDocuments[]

  @@index([id, name])
  @@map("documents_types")
}

model PaymentMethods {
  id                Int                 @id @unique
  name              String
  created_at        DateTime            @default(now())
  updated_at        DateTime?
  BusinessLocations BusinessLocations[]

  @@index([id, name])
  @@map("payment_methods")
}

model SystemLogs {
  id          String    @id @default(uuid())
  log_type_id Int
  log_type    LogsTypes @relation(fields: [log_type_id], references: [id], onDelete: Cascade)
  path        String?   @default("none")
  log         String
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  @@index([id, log_type_id, path])
  @@map("system_logs")
}

model LogsTypes {
  id         Int          @id @unique
  name       String
  created_at DateTime     @default(now())
  updated_at DateTime?
  SystemLogs SystemLogs[]

  @@index([id, name])
  @@map("logs_types")
}

model Messages {
  id String @id @default(uuid())

  sender_id String
  sender    Users  @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  content String

  read Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@index([id, sender_id])
  @@map("messages")
}

model LocationsPhotos {
  id String @id @default(uuid())

  location_id String
  location    BusinessLocations @relation(fields: [location_id], references: [id], onDelete: Cascade)

  photo String

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@index([id, location_id])
  @@map("locations_photos")
}
